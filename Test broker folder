package be.axa.pccorp.eservicing.clink.service.impl;

import be.axa.pccorp.eservicing.clink.model.bo.DocumentAuditBO;
import be.axa.pccorp.eservicing.clink.model.constants.Constants;
import be.axa.pccorp.eservicing.clink.model.exception.BusinessException;
import be.axa.corp.gdservices.webservice.published.service.gduser.GdUserNotFoundException;
import be.axa.corp.gdservices.webservice.published.service.gduser.JBCException;
import be.axa.corp.gdservices.webservice.published.type.common.DataParamPT;
import be.axa.corp.gdservices.webservice.published.type.common.KeyValueElementPT;
import be.axa.corp.gdservices.webservice.published.type.gdfolder.GdDocumentVoPT;
import be.axa.pccorp.eservicing.clink.model.exception.ErrorCode;
import be.axa.pccorp.eservicing.clink.model.exception.ExceptionCode;
import be.axa.pccorp.eservicing.clink.oracleadapter.dao.ServiceDao;
import be.axa.pccorp.eservicing.clink.oracleadapter.repository.ServiceRepository;
import be.axa.pccorp.eservicing.clink.restadapter.model.sitecore.InsuranceDocument;
import be.axa.pccorp.eservicing.clink.service.IBrokerFolderService;
import be.axa.pccorp.eservicing.clink.service.IDocumentAuditService;
import be.axa.pccorp.eservicing.clink.service.IFolderAuditService;
import be.axa.pccorp.eservicing.clink.service.IGeneralConditionCatalogService;
import be.axa.pccorp.eservicing.clink.soapadapter.ex.BrokerFolderNotFoundException;
import be.axa.pccorp.eservicing.clink.soapadapter.ex.FolderLockedException;
import be.axa.pccorp.eservicing.clink.soapadapter.service.gd.IGdFolderRemoteServices;
import be.axa.pccorp.eservicing.clink.soapadapter.service.gd.IGdUserRemoteServices;
import be.axa.pccorp.eservicing.clink.soapadapter.type.*;
import be.axa.pccorp.eservicing.clink.soapadapter.vo.BrokerContactPersonVo;
import be.axa.pccorp.eservicing.clink.soapadapter.vo.BrokerFolderVo;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class BrokerFolderServiceTest {

    @InjectMocks
    private BrokerFolderService brokerFolderService;

    @Mock
    private IDocumentAuditService documentAuditService;

    @Mock
    private IFolderAuditService folderAuditService;

    @Mock
    private IGeneralConditionCatalogService gccServiceDao;

    @Mock
    private IGdFolderRemoteServices gdFolderRemoteServicesDao;

    @Mock
    private ServiceRepository serviceDao;

    @Mock
    private IGdUserRemoteServices gdUserRemoteServicesDao;

    private BrokerUserVo validBrokerUserVo;

    @BeforeEach
    void setUp() {
        // Setup valid BrokerUserVo
        validBrokerUserVo = new BrokerUserVo();
        validBrokerUserVo.setUserId("1234567");
        validBrokerUserVo.setApplicationLanguage(1);

        // Add producer numbers - the getProducerNumbersWithoutPointOfsale() method will derive from these
        validBrokerUserVo.addProducerNumber("12345 (Test Point of Sale)");
        validBrokerUserVo.addProducerNumber("67890 (Another POS)");
    }

    // Test checkIfOfferIsTransfered method
    @Test
    void testCheckIfOfferIsTransfered_success() throws Exception {
        // Arrange
        String offerReference = "OFFER123";
        String expectedResult = "FOLDER123";
        when(gdFolderRemoteServicesDao.getFolderForAnOffer(offerReference)).thenReturn(expectedResult);

        // Act
        String result = brokerFolderService.checkIfOfferIsTransfered(offerReference);

        // Assert
        assertEquals(expectedResult, result);
        verify(gdFolderRemoteServicesDao).getFolderForAnOffer(offerReference);
    }

    @Test
    void testCheckIfOfferIsTransfered_webserviceException() throws Exception {
        // Arrange
        String offerReference = "OFFER123";
        BusinessException businessException = new BusinessException();
        businessException.setMessage(ErrorCode.WEBSERVICE_EXCEPTION);
        when(gdFolderRemoteServicesDao.getFolderForAnOffer(offerReference)).thenThrow(businessException);

        // Act & Assert
        BusinessException exception = assertThrows(BusinessException.class, () ->
                brokerFolderService.checkIfOfferIsTransfered(offerReference));
        assertEquals(ErrorCode.WS_EXCEPTION_CODE, exception.getMessage());
    }

    @Test
    void testCheckIfOfferIsTransfered_businessException() throws Exception {
        // Arrange
        String offerReference = "OFFER123";
        BusinessException businessException = new BusinessException("Test error");
        when(gdFolderRemoteServicesDao.getFolderForAnOffer(offerReference)).thenThrow(businessException);

        // Act & Assert
        BusinessException exception = assertThrows(BusinessException.class, () ->
                brokerFolderService.checkIfOfferIsTransfered(offerReference));
        assertEquals("Test error", exception.getMessage());
    }

    // Test retrieveCcgAnnexesByCcgId method
    @Test
    void testRetrieveCcgAnnexesByCcgId_success() throws Exception {
        // Arrange
        Map<String, String> gcMap = new HashMap<>();
        gcMap.put("GC001", "General Condition 1");
        List<InsuranceDocument> expectedDocuments = Arrays.asList(mock(InsuranceDocument.class));
        // Use any() for locale since the service determines it from applicationLanguage
        when(gccServiceDao.retrieveGcByReferences(eq(gcMap), any(Locale.class))).thenReturn(expectedDocuments);

        // Act
        List<InsuranceDocument> result = brokerFolderService.retrieveCcgAnnexesByCcgId(validBrokerUserVo, gcMap);

        // Assert
        assertEquals(expectedDocuments, result);
        verify(gccServiceDao).retrieveGcByReferences(eq(gcMap), any(Locale.class));
    }

    @Test
    void testRetrieveCcgAnnexesByCcgId_exception() throws Exception {
        // Arrange
        Map<String, String> gcMap = new HashMap<>();
        when(gccServiceDao.retrieveGcByReferences(any(), any())).thenThrow(new RuntimeException("Test error"));

        // Act & Assert
        BusinessException exception = assertThrows(BusinessException.class, () ->
                brokerFolderService.retrieveCcgAnnexesByCcgId(validBrokerUserVo, gcMap));
        assertEquals("Test error", exception.getMessage());
    }

    // Test retrieveCcgForOneFolder method
    @Test
    void testRetrieveCcgForOneFolder_success() throws Exception {
        // Arrange
        String folderReference = "FOLDER123";
        String cTypeRef = "CTYPE001";
        List<String> ccgReferences = Arrays.asList("CCG001", "CCG002");
        List<InsuranceDocument> expectedDocuments = Arrays.asList(mock(InsuranceDocument.class));

        when(gdFolderRemoteServicesDao.retrieveCcgReferenceForOneFolderFromIms(validBrokerUserVo, folderReference, cTypeRef))
                .thenReturn(ccgReferences);
        when(gccServiceDao.retrieveGcByReferences(eq(ccgReferences), eq(validBrokerUserVo.getUserId()), any(Locale.class)))
                .thenReturn(expectedDocuments);

        // Act
        List<InsuranceDocument> result = brokerFolderService.retrieveCcgForOneFolder(validBrokerUserVo, folderReference, cTypeRef);

        // Assert
        assertEquals(expectedDocuments, result);
        verify(gdFolderRemoteServicesDao).retrieveCcgReferenceForOneFolderFromIms(validBrokerUserVo, folderReference, cTypeRef);
        verify(gccServiceDao).retrieveGcByReferences(eq(ccgReferences), eq(validBrokerUserVo.getUserId()), any(Locale.class));
    }

    @Test
    void testRetrieveCcgForOneFolder_emptyCcgList() throws Exception {
        // Arrange
        String folderReference = "FOLDER123";
        String cTypeRef = "CTYPE001";
        when(gdFolderRemoteServicesDao.retrieveCcgReferenceForOneFolderFromIms(validBrokerUserVo, folderReference, cTypeRef))
                .thenReturn(Collections.emptyList());

        // Act
        List<InsuranceDocument> result = brokerFolderService.retrieveCcgForOneFolder(validBrokerUserVo, folderReference, cTypeRef);

        // Assert
        assertTrue(result.isEmpty());
        verify(gdFolderRemoteServicesDao).retrieveCcgReferenceForOneFolderFromIms(validBrokerUserVo, folderReference, cTypeRef);
        verify(gccServiceDao, never()).retrieveGcByReferences(any(), any(), any());
    }

    @Test
    void testRetrieveCcgForOneFolder_nullBrokerUserVo() {
        // Act & Assert
        assertThrows(NullPointerException.class, () ->
                brokerFolderService.retrieveCcgForOneFolder(null, "FOLDER123", "CTYPE001"));
    }

    @Test
    void testRetrieveCcgForOneFolder_nullFolderReference() {
        // Act & Assert
        assertThrows(NullPointerException.class, () ->
                brokerFolderService.retrieveCcgForOneFolder(validBrokerUserVo, null, "CTYPE001"));
    }

    @Test
    void testRetrieveCcgForOneFolder_nullCTypeRef() {
        // Act & Assert
        assertThrows(NullPointerException.class, () ->
                brokerFolderService.retrieveCcgForOneFolder(validBrokerUserVo, "FOLDER123", null));
    }

    @Test
    void testRetrieveCcgForOneFolder_exception() throws Exception {
        // Arrange
        String folderReference = "FOLDER123";
        String cTypeRef = "CTYPE001";
        when(gdFolderRemoteServicesDao.retrieveCcgReferenceForOneFolderFromIms(any(), any(), any()))
                .thenThrow(new RuntimeException("Test error"));

        // Act & Assert
        BusinessException exception = assertThrows(BusinessException.class, () ->
                brokerFolderService.retrieveCcgForOneFolder(validBrokerUserVo, folderReference, cTypeRef));
        assertEquals("Test error", exception.getMessage());
    }

    // Test retrieveFolderDerscriptionListForFolderReferenceList method
    @Test
    void testRetrieveFolderDerscriptionListForFolderReferenceList_success() throws Exception {
        // Arrange
        List<String> folderReferenceList = Arrays.asList("FOLDER123", "FOLDER456");

        // Setup KeyValueElementPT for folder description
        KeyValueElementPT folderNameElement = mock(KeyValueElementPT.class);
        when(folderNameElement.getKey()).thenReturn("FOLDERNAME");
        when(folderNameElement.getValue()).thenReturn("FOLDER123");

        KeyValueElementPT insuredNameElement = mock(KeyValueElementPT.class);
        when(insuredNameElement.getKey()).thenReturn("INSUREDNAME");
        when(insuredNameElement.getValue()).thenReturn("Test Insured");

        KeyValueElementPT productNameElement = mock(KeyValueElementPT.class);
        when(productNameElement.getKey()).thenReturn("INSURANCEPRODNAME");
        when(productNameElement.getValue()).thenReturn("Test Product");

        DataParamPT dataParamPT = mock(DataParamPT.class);
        when(dataParamPT.getKeyValueElementPTs()).thenReturn(Arrays.asList(
                folderNameElement, insuredNameElement, productNameElement));

        List<DataParamPT> folderDescriptionOutput = Arrays.asList(dataParamPT);
        when(gdFolderRemoteServicesDao.retrieveFolderDerscriptionListForFolderReferenceList(folderReferenceList))
                .thenReturn(folderDescriptionOutput);

        // Act
        HashMap result = brokerFolderService.retrieveFolderDerscriptionListForFolderReferenceList(folderReferenceList);

        // Assert
        assertNotNull(result);
        assertTrue(result.containsKey("FOLDER123"));
        verify(gdFolderRemoteServicesDao).retrieveFolderDerscriptionListForFolderReferenceList(folderReferenceList);
    }

    @Test
    void testRetrieveFolderDerscriptionListForFolderReferenceList_nullInput() {
        // Act & Assert
        assertThrows(NullPointerException.class, () ->
                brokerFolderService.retrieveFolderDerscriptionListForFolderReferenceList(null));
    }

    @Test
    void testRetrieveFolderDerscriptionListForFolderReferenceList_exception() throws Exception {
        // Arrange
        List<String> folderReferenceList = Arrays.asList("FOLDER123");
        when(gdFolderRemoteServicesDao.retrieveFolderDerscriptionListForFolderReferenceList(any()))
                .thenThrow(new RuntimeException("Test error"));

        // Act & Assert
        BusinessException exception = assertThrows(BusinessException.class, () ->
                brokerFolderService.retrieveFolderDerscriptionListForFolderReferenceList(folderReferenceList));
        assertEquals("Test error", exception.getMessage());
    }


    @Test
    void testRetrieveFolderWithNonDeletedPublicDocuments_nullBrokerUserVo() {
        // Act & Assert
        assertThrows(NullPointerException.class, () ->
                brokerFolderService.retrieveFolderWithNonDeletedPublicDocuments(
                        null, "FOLDER123", "SESSION123", true, "2"));
    }

    @Test
    void testRetrieveFolderWithNonDeletedPublicDocuments_nullFolderReference() {
        // Act & Assert
        assertThrows(NullPointerException.class, () ->
                brokerFolderService.retrieveFolderWithNonDeletedPublicDocuments(
                        validBrokerUserVo, null, "SESSION123", true, "2"));
    }

    @Test
    void testRetrieveFolderWithNonDeletedPublicDocuments_folderLocked() throws Exception {
        // Arrange
        String folderReference = "FOLDER123";
        String sessionId = "SESSION123";
        boolean refreshImsData = true;
        String folderTypeId = "2";

        BrokerFolderVo brokerFolderVo = mock(BrokerFolderVo.class);
        when(brokerFolderVo.getLocked()).thenReturn(Boolean.TRUE);
        List<BrokerFolderVo> folderSet = Arrays.asList(brokerFolderVo);
        when(gdFolderRemoteServicesDao.searchFoldersByObjectNameWithNonDeletedPublicDocuments(
                validBrokerUserVo, folderReference, refreshImsData, folderTypeId))
                .thenReturn(folderSet);

        // Act & Assert
        assertThrows(FolderLockedException.class, () ->
                brokerFolderService.retrieveFolderWithNonDeletedPublicDocuments(
                        validBrokerUserVo, folderReference, sessionId, refreshImsData, folderTypeId));
    }




    @Test
    void testRetrieveClaimWithNonDeletedDocuments_nullBrokerUserVo() {
        // Act & Assert
        assertThrows(NullPointerException.class, () ->
                brokerFolderService.retrieveClaimWithNonDeletedDocuments(
                        null, "CLAIM123", "SESSION123", true, "3"));
    }

    @Test
    void testRetrieveClaimWithNonDeletedDocuments_nullClaimReference() {
        // Act & Assert
        assertThrows(NullPointerException.class, () ->
                brokerFolderService.retrieveClaimWithNonDeletedDocuments(
                        validBrokerUserVo, null, "SESSION123", true, "3"));
    }

    @Test
    void testRetrieveClaimWithNonDeletedDocuments_nullSessionId() {
        // Act & Assert
        assertThrows(NullPointerException.class, () ->
                brokerFolderService.retrieveClaimWithNonDeletedDocuments(
                        validBrokerUserVo, "CLAIM123", null, true, "3"));
    }


    @Test
    void testRetrieveFolderWithoutDocuments_nullBrokerUserVo() {
        // Act & Assert
        assertThrows(NullPointerException.class, () ->
                brokerFolderService.retrieveFolderWithoutDocuments(null, "POLICE123", "2"));
    }

    @Test
    void testRetrieveFolderWithoutDocuments_blankUserId() {
        // Arrange
        validBrokerUserVo.setUserId("");

        // Act & Assert
        assertThrows(IllegalArgumentException.class, () ->
                brokerFolderService.retrieveFolderWithoutDocuments(validBrokerUserVo, "POLICE123", "2"));
    }

    @Test
    void testRetrieveFolderWithoutDocuments_blankPolicyReference() {
        // Act & Assert
        assertThrows(IllegalArgumentException.class, () ->
                brokerFolderService.retrieveFolderWithoutDocuments(validBrokerUserVo, "", "2"));
    }

    // Test validatePolicyWithBroker method
    @Test
    void testValidatePolicyWithBroker_success() throws Exception {
        // Arrange
        String policeReference = "POLICE123";
        String folderTypeId = "2";

        // Setup BrokerFolderVo mock
        BrokerFolderVo brokerFolderVo = mock(BrokerFolderVo.class);
        when(brokerFolderVo.getProducernumber()).thenReturn("12345");

        List<BrokerFolderVo> folders = Arrays.asList(brokerFolderVo);
        when(gdFolderRemoteServicesDao.searchFoldersByObjectNameWithoutDocuments(
                validBrokerUserVo, policeReference, true, folderTypeId))
                .thenReturn(folders);

        // Act
        Boolean result = brokerFolderService.validatePolicyWithBroker(
                validBrokerUserVo, policeReference, folderTypeId);

        // Assert
        assertTrue(result);
        verify(gdFolderRemoteServicesDao).searchFoldersByObjectNameWithoutDocuments(
                validBrokerUserVo, policeReference, true, folderTypeId);
    }

    @Test
    void testValidatePolicyWithBroker_nullBrokerUserVo() {
        // Act & Assert
        assertThrows(NullPointerException.class, () ->
                brokerFolderService.validatePolicyWithBroker(null, "POLICE123", "2"));
    }

    @Test
    void testValidatePolicyWithBroker_blankUserId() {
        // Arrange
        validBrokerUserVo.setUserId("");

        // Act & Assert
        assertThrows(IllegalArgumentException.class, () ->
                brokerFolderService.validatePolicyWithBroker(validBrokerUserVo, "POLICE123", "2"));
    }

    @Test
    void testValidatePolicyWithBroker_nullProducerNumbers() {
        // Arrange
        validBrokerUserVo.setProducerNumbers(null);

        // Act & Assert
        assertThrows(IllegalArgumentException.class, () ->
                brokerFolderService.validatePolicyWithBroker(validBrokerUserVo, "POLICE123", "2"));
    }

    @Test
    void testValidatePolicyWithBroker_emptyProducerNumbers() {
        // Arrange
        validBrokerUserVo.setProducerNumbers(new HashSet<>());

        // Act & Assert
        assertThrows(IllegalArgumentException.class, () ->
                brokerFolderService.validatePolicyWithBroker(validBrokerUserVo, "POLICE123", "2"));
    }

    @Test
    void testValidatePolicyWithBroker_blankPolicyReference() {
        // Act & Assert
        assertThrows(IllegalArgumentException.class, () ->
                brokerFolderService.validatePolicyWithBroker(validBrokerUserVo, "", "2"));
    }


    @Test
    void testRetrieveInsuredNameWhenFolderExistAndIsInPortfolio_nullBrokerUserVo() {
        // Act & Assert
        assertThrows(NullPointerException.class, () ->
                brokerFolderService.retrieveInsuredNameWhenFolderExistAndIsInPortfolio(
                        null, "POLICE123", "2"));
    }

    @Test
    void testRetrieveInsuredNameWhenFolderExistAndIsInPortfolio_blankUserId() {
        // Arrange
        validBrokerUserVo.setUserId("");

        // Act & Assert
        assertThrows(IllegalArgumentException.class, () ->
                brokerFolderService.retrieveInsuredNameWhenFolderExistAndIsInPortfolio(
                        validBrokerUserVo, "POLICE123", "2"));
    }

    @Test
    void testRetrieveInsuredNameWhenFolderExistAndIsInPortfolio_blankPolicyReference() {
        // Act & Assert
        assertThrows(IllegalArgumentException.class, () ->
                brokerFolderService.retrieveInsuredNameWhenFolderExistAndIsInPortfolio(
                        validBrokerUserVo, "", "2"));
    }

    @Test
    void testRetrieveInsuredNameWhenFolderExistAndIsInPortfolio_folderNotInPortfolio() throws Exception {
        // Arrange
        String policeReference = "POLICE123";
        String folderTypeId = "2";

        // Setup BrokerFolderVo mock with different producer number
        BrokerFolderVo brokerFolderVo = mock(BrokerFolderVo.class);
        when(brokerFolderVo.getProducernumber()).thenReturn("99999"); // Different producer number

        List<BrokerFolderVo> folders = Arrays.asList(brokerFolderVo);
        when(gdFolderRemoteServicesDao.searchFoldersByObjectNameWithoutDocuments(
                validBrokerUserVo, policeReference, true, folderTypeId))
                .thenReturn(folders);

        // Act & Assert
        BusinessException exception = assertThrows(BusinessException.class, () ->
                brokerFolderService.retrieveInsuredNameWhenFolderExistAndIsInPortfolio(
                        validBrokerUserVo, policeReference, folderTypeId));
        // Check the message instead of code since the code might be null
        assertTrue(exception.getMessage().contains("not in portfolio"));
    }

    @Test
    void testRetrieveInsuredNameWhenFolderExistAndIsInPortfolio_jbcException() throws Exception {
        // Arrange
        String policeReference = "POLICE123";
        String folderTypeId = "2";

        // Use RuntimeException instead of JBCException since it's a checked exception
        when(gdFolderRemoteServicesDao.searchFoldersByObjectNameWithoutDocuments(
                any(), any(), anyBoolean(), anyString()))
                .thenThrow(new RuntimeException("Test JBC error"));

        // Act & Assert
        BusinessException exception = assertThrows(BusinessException.class, () ->
                brokerFolderService.retrieveInsuredNameWhenFolderExistAndIsInPortfolio(
                        validBrokerUserVo, policeReference, folderTypeId));
        assertEquals("Test JBC error", exception.getMessage());
    }

    @Test
    void testRetrieveInsuredNameWhenFolderExistAndIsInPortfolio_exception() throws Exception {
        // Arrange
        String policeReference = "POLICE123";
        String folderTypeId = "2";

        when(gdFolderRemoteServicesDao.searchFoldersByObjectNameWithoutDocuments(
                any(), any(), anyBoolean(), anyString()))
                .thenThrow(new RuntimeException("Test error"));

        // Act & Assert
        BusinessException exception = assertThrows(BusinessException.class, () ->
                brokerFolderService.retrieveInsuredNameWhenFolderExistAndIsInPortfolio(
                        validBrokerUserVo, policeReference, folderTypeId));
        assertEquals("Test error", exception.getMessage());
    }



    @Test
    void testRetrieveFolderWithNonDeletedPublicDocuments_jbcException() throws Exception {
        // Arrange
        String folderReference = "FOLDER123";
        String sessionId = "SESSION123";
        boolean refreshImsData = true;
        String folderTypeId = "2";

        when(gdFolderRemoteServicesDao.searchFoldersByObjectNameWithNonDeletedPublicDocuments(
                validBrokerUserVo, folderReference, refreshImsData, folderTypeId))
                .thenThrow(new be.axa.corp.gdservices.webservice.published.service.gdfolder.JBCException("JBC Error"));

        // Act & Assert
        assertThrows(BrokerFolderNotFoundException.class, () ->
                brokerFolderService.retrieveFolderWithNonDeletedPublicDocuments(
                        validBrokerUserVo, folderReference, sessionId, refreshImsData, folderTypeId));
    }

    @Test
    void testRetrieveFolderWithNonDeletedPublicDocuments_webserviceException() throws Exception {
        // Arrange
        String folderReference = "FOLDER123";
        String sessionId = "SESSION123";
        boolean refreshImsData = true;
        String folderTypeId = "2";

        BusinessException businessException = new BusinessException();
        businessException.setMessage(ErrorCode.WEBSERVICE_EXCEPTION);
        when(gdFolderRemoteServicesDao.searchFoldersByObjectNameWithNonDeletedPublicDocuments(
                validBrokerUserVo, folderReference, refreshImsData, folderTypeId))
                .thenThrow(businessException);

        // Act & Assert
        BusinessException exception = assertThrows(BusinessException.class, () ->
                brokerFolderService.retrieveFolderWithNonDeletedPublicDocuments(
                        validBrokerUserVo, folderReference, sessionId, refreshImsData, folderTypeId));
        assertEquals(ErrorCode.WS_EXCEPTION_CODE, exception.getMessage());
    }



    @Test
    void testValidatePolicyWithBroker_folderNotInPortfolio() throws Exception {
        // Arrange
        String policeReference = "POLICE123";
        String folderTypeId = "2";

        // Setup BrokerFolderVo mock with different producer number
        BrokerFolderVo brokerFolderVo = mock(BrokerFolderVo.class);
        when(brokerFolderVo.getProducernumber()).thenReturn("99999"); // Different producer number

        List<BrokerFolderVo> folders = Arrays.asList(brokerFolderVo);
        when(gdFolderRemoteServicesDao.searchFoldersByObjectNameWithoutDocuments(
                validBrokerUserVo, policeReference, true, folderTypeId))
                .thenReturn(folders);

        // Act & Assert
        BusinessException exception = assertThrows(BusinessException.class, () ->
                brokerFolderService.validatePolicyWithBroker(validBrokerUserVo, policeReference, folderTypeId));
        assertTrue(exception.getMessage().contains("not in portfolio"));

    }

    @Test
    void testValidatePolicyWithBroker_nullFolder() throws Exception {
        // Arrange
        String policeReference = "POLICE123";
        String folderTypeId = "2";

        List<BrokerFolderVo> folders = Arrays.asList((BrokerFolderVo) null);
        when(gdFolderRemoteServicesDao.searchFoldersByObjectNameWithoutDocuments(
                validBrokerUserVo, policeReference, true, folderTypeId))
                .thenReturn(folders);

        // Act & Assert
        BusinessException exception = assertThrows(BusinessException.class, () ->
                brokerFolderService.validatePolicyWithBroker(validBrokerUserVo, policeReference, folderTypeId));
        assertTrue(exception.getMessage().contains("not in portfolio"));

    }

    @Test
    void testValidatePolicyWithBroker_nullProducerNumber() throws Exception {
        // Arrange
        String policeReference = "POLICE123";
        String folderTypeId = "2";

        BrokerFolderVo brokerFolderVo = mock(BrokerFolderVo.class);
        when(brokerFolderVo.getProducernumber()).thenReturn(null);

        List<BrokerFolderVo> folders = Arrays.asList(brokerFolderVo);
        when(gdFolderRemoteServicesDao.searchFoldersByObjectNameWithoutDocuments(
                validBrokerUserVo, policeReference, true, folderTypeId))
                .thenReturn(folders);

        // Act & Assert
        BusinessException exception = assertThrows(BusinessException.class, () ->
                brokerFolderService.validatePolicyWithBroker(validBrokerUserVo, policeReference, folderTypeId));
        assertTrue(exception.getMessage().contains("not in portfolio"));

    }

    @Test
    void testValidatePolicyWithBroker_jbcException() throws Exception {
        // Arrange
        String policeReference = "POLICE123";
        String folderTypeId = "2";

        when(gdFolderRemoteServicesDao.searchFoldersByObjectNameWithoutDocuments(
                validBrokerUserVo, policeReference, true, folderTypeId))
                .thenThrow(new be.axa.corp.gdservices.webservice.published.service.gdfolder.JBCException("JBC Error"));

        // Act & Assert
        BrokerFolderNotFoundException exception = assertThrows(BrokerFolderNotFoundException.class, () ->
                brokerFolderService.validatePolicyWithBroker(validBrokerUserVo, policeReference, folderTypeId));
        assertEquals("JBC Error", exception.getCause().getMessage());




    }

    @Test
    void testValidatePolicyWithBroker_exception() throws Exception {
        // Arrange
        String policeReference = "POLICE123";
        String folderTypeId = "2";

        when(gdFolderRemoteServicesDao.searchFoldersByObjectNameWithoutDocuments(
                validBrokerUserVo, policeReference, true, folderTypeId))
                .thenThrow(new RuntimeException("Test error"));

        // Act & Assert
        BusinessException exception = assertThrows(BusinessException.class, () ->
                brokerFolderService.validatePolicyWithBroker(validBrokerUserVo, policeReference, folderTypeId));
        assertEquals("Test error", exception.getMessage());
    }




    @Test
    void testRetrieveFolderWithNonDeletedPublicDocuments_withDocuments() throws Exception {
        // Arrange
        String folderReference = "FOLDER123";
        String sessionId = "SESSION123";
        boolean refreshImsData = true;
        String folderTypeId = "2";

        BrokerFolderVo brokerFolderVo = mock(BrokerFolderVo.class);
        when(brokerFolderVo.getLocked()).thenReturn(Boolean.FALSE);
        when(brokerFolderVo.getProducernumber()).thenReturn("12345");
        when(brokerFolderVo.getSubfoldertypeId()).thenReturn("11");
        when(brokerFolderVo.getSubfoldertypeLabel()).thenReturn("Test Folder Type");
        when(brokerFolderVo.getInsuredname()).thenReturn("Test Insured");
        when(brokerFolderVo.getInsuranceprodname()).thenReturn("Test Product");
        when(brokerFolderVo.getObjectId()).thenReturn("OBJ123");
        when(brokerFolderVo.getObjectName()).thenReturn("Test Object");
        when(brokerFolderVo.isOfFolderType(anyInt())).thenReturn(true);
        when(brokerFolderVo.getImsfolderstatus()).thenReturn("118");

        // Mock document
        GdDocumentVoPT documentVo = mock(GdDocumentVoPT.class);
        when(documentVo.getDocumentname()).thenReturn("Test Document");
        when(documentVo.getEntrydate()).thenReturn("20231201");
        when(documentVo.getEntryhour()).thenReturn("1200");
        when(documentVo.getStatusLabel()).thenReturn("Active");
        when(documentVo.getDocumenttypeLabelBroker()).thenReturn("PDF");
        when(documentVo.getObjectId()).thenReturn("DOC123");
        when(documentVo.getImperativedate()).thenReturn("20231231");
        when(documentVo.getOrigincode()).thenReturn("ORIGIN01");

        when(brokerFolderVo.getDocumentList()).thenReturn(Arrays.asList(documentVo));

        List<BrokerFolderVo> folderSet = Arrays.asList(brokerFolderVo);
        when(gdFolderRemoteServicesDao.searchFoldersByObjectNameWithNonDeletedPublicDocuments(
                validBrokerUserVo, folderReference, refreshImsData, folderTypeId))
                .thenReturn(folderSet);

        // Mock contact person setup
        when(brokerFolderVo.getResponsiblemanId()).thenReturn("123");
        when(brokerFolderVo.getServiceCodeTeam()).thenReturn("TEAM01");
        when(brokerFolderVo.getRegionCodeProducer()).thenReturn("REG01");

        DataParamPT interveniantData = mock(DataParamPT.class);
        KeyValueElementPT keyValue = mock(KeyValueElementPT.class);
        when(keyValue.getKey()).thenReturn("USERID");
        when(keyValue.getValue()).thenReturn("USER123");
        when(interveniantData.getKeyValueElementPTs()).thenReturn(Arrays.asList(keyValue));
        when(gdUserRemoteServicesDao.findByIntervenientId(anyLong())).thenReturn(interveniantData);

        BrokerContactPersonVo contactPerson = mock(BrokerContactPersonVo.class);
        when(contactPerson.getDefaultContact()).thenReturn("NO");
        when(contactPerson.getFullNameLastNameFirst(anyBoolean())).thenReturn("John Doe");
        when(contactPerson.getEmailAddress()).thenReturn("john@test.com");
        when(contactPerson.getPhoneNo()).thenReturn("1234567890");
        when(contactPerson.getFaxNo()).thenReturn("0987654321");
        when(gdUserRemoteServicesDao.getPersonPropertiesbyUser3Pos(anyString())).thenReturn(contactPerson);

        // Mock document audit
        when(documentAuditService.retrieveConsultationByObjectIdAndUserId7Pos(anyString(), anyString()))
                .thenReturn(mock(DocumentAuditBO.class));

        // Act
        FolderVo result = brokerFolderService.retrieveFolderWithNonDeletedPublicDocuments(
                validBrokerUserVo, folderReference, sessionId, refreshImsData, folderTypeId);

        // Assert
        assertNotNull(result);
        /*assertEquals(1, result.getDocumentList().size());*/
        verify(documentAuditService).retrieveConsultationByObjectIdAndUserId7Pos(anyString(), anyString());
    }


}

 
