public String[] addDocumentsForMandatPlacement(BrokerUserVo brokerUserVo,
                                    List<MultipartFile> documents, List policeReferences, String myDemand,
                                    ReportLabelVo reportLabelVo, String documentTypeCode, String concernLabel,
                                    Date brokerResponseDate, String brokerReference, String folderTypeId, String producerReference,
                                    boolean bMailAccount, String mailAdress, boolean bMailBroker, String mailAdressBroker)
        throws BusinessException, JBCException {
    
    LOG.info("addDocumentsForMandatPlacement(documents, policeReferences, myDemand, reportLabelVo, concernLabel, brokerResponseDate, brokerReference); "
            + documents + ";" + policeReferences + ";" + myDemand + ";" + reportLabelVo + ";"
            + concernLabel + ";" + brokerResponseDate + ";" + brokerReference);
    
    // Call convertChar first as in original
    myDemand = convertChar(myDemand);
    
    validateInputs(brokerUserVo, policeReferences, concernLabel, documents);

    try {
        DistributorInfo distributor = setupDistributor(brokerUserVo);
        String producerName = getProducerName(distributor);
        
        // Preserve visibility code from original
        String visibilityCode = "PRODUCTOR,4|";
        
        Long uploadHistoryId = saveUploadHistory(brokerUserVo, distributor, myDemand, 
                brokerResponseDate, brokerReference, bMailAccount);
        
        ProcessResult processResult = processAllPoliceReferences(brokerUserVo, documents, policeReferences, myDemand,
                reportLabelVo, documentTypeCode, concernLabel, brokerResponseDate, brokerReference,
                folderTypeId, producerReference, producerName, uploadHistoryId, bMailAccount, 
                mailAdress, bMailBroker, mailAdressBroker);

        return buildResponse(processResult);

    } catch (BusinessException e) {
        throw new BusinessException(e.getLocalizedMessage(), e);
    } catch (be.axa.corp.gdservices.webservice.published.service.gdfolder.JBCException e) {
        throw new BusinessException(e.getLocalizedMessage(), e);
    } catch (IOException e) {
        throw new RuntimeException(e);
    }
}

// Enhanced validation method
private void validateInputs(BrokerUserVo brokerUserVo, List policeReferences, String concernLabel, List<MultipartFile> documents) {
    Validate.notNull(brokerUserVo, BROKERUSERVO_NULL);
    Validate.isTrue(StringUtils.isNotBlank(brokerUserVo.getUserId()), BROKERUSERVO_USERID_NULL);
    Validate.isTrue(StringUtils.isNotBlank(brokerUserVo.getUserLanguage()), BROKERUSERVO_LANGUAGE_NULL);
    Validate.notNull(brokerUserVo.getApplicationLanguage(), "brokerUserVo.getApplicationLanguage() is null");
    Validate.notNull(policeReferences, "policeReferences is null");
    Validate.isTrue(policeReferences.size() > 0, "policeReferences is empty");
    Validate.isTrue(StringUtils.isNotBlank(concernLabel), "concernLabel is null");
    
    // Check format and size (commented in original but structure should be preserved)
    // checkFormatAndSize(documents);
    
    if (documents == null || documents.isEmpty()) {
        BusinessException e = new BusinessException(ErrorCode.UPLOAD_DOCLIST_EMPTY, ErrorCode.UPLOAD_DOCLIST_EMPTY);
        e.setMessage(ErrorCode.UPLOAD_DOCLIST_EMPTY);
        throw e;
    }
}

// Enhanced distributor setup with null checks
private DistributorInfo setupDistributor(BrokerUserVo brokerUserVo) throws BusinessException, JBCException {
    if (brokerUserVo != null && StringUtils.isNotBlank(brokerUserVo.getSelectedProucerReference())) {
        String temp = brokerUserVo.getSelectedProucerReference().trim();
        DistributorInfo distributor = difAdapter.getDistributortByPAccId(temp);
        if (distributor != null) {
            brokerUserVo.setSelectedPointOfSale(distributor.getDistributorId());
        }
        return distributor;
    }
    return null;
}

// Safe producer name method
private String getProducerName(DistributorInfo distributor) {
    if (distributor != null) {
        return (distributor.getName() != null ? distributor.getName() : "") + " " + 
               (distributor.getFname() != null ? distributor.getFname() : "");
    }
    return "";
}

// Enhanced folder finding with error handling
private BrokerFolderVo findFolder(BrokerUserVo brokerUserVo, String policeReference, String folderTypeId) throws JBCException {
    List folders = gdFolderRemoteServicesDao.searchFoldersByObjectNameWithoutDocuments(
            brokerUserVo, policeReference, true, folderTypeId);
    if (folders == null || folders.isEmpty()) {
        throw new BusinessException("No folder found for police reference: " + policeReference);
    }
    return (BrokerFolderVo) folders.iterator().next();
}

// Enhanced report generation with proper user ID handling
private String generateReport(List<MultipartFile> documents, String policeReference, String envelopUUid, 
        String producerName, String myDemand, BrokerUserVo brokerUserVo, ReportLabelVo reportLabelVo,
        String concernLabel, Date brokerResponseDate, String brokerReference, String productInsurance,
        String producerReference, boolean bMailAccount, String mailAdress, boolean bMailBroker, 
        String mailAdressBroker, List<CommunicationRecordAttachmentBO> communicationRecordAttachmentBOList,
        String submittedContentType) throws BusinessException, JBCException, IOException {
    
    String userIdBackUp = brokerUserVo.getUserId();
    
    try {
        // Switch to GD user as in original
        brokerUserVo.setUserId(USER_CLINK_FOR_GD);

        String newProducerReference = adaptProducerReference(brokerUserVo, producerReference);
        
        // Restore original user ID for report generation
        brokerUserVo.setUserId(userIdBackUp);

        String report = generateReportForMandatPlacement(documents, List.of(policeReference), envelopUUid, 
                Calendar.getInstance(), producerName, myDemand, brokerUserVo, reportLabelVo, concernLabel,
                brokerResponseDate, brokerReference, productInsurance, newProducerReference,
                bMailAccount, mailAdress, mailAdressBroker);

        // Add report to attachments
        CommunicationRecordAttachmentBO communicationRecordAttachmentBO = new CommunicationRecordAttachmentBO();
        communicationRecordAttachmentBO.setSubmittedContentType(submittedContentType);
        communicationRecordAttachmentBO.setDocumentName(reportLabelVo != null ? reportLabelVo.getDocumentName() : "report");
        communicationRecordAttachmentBO.setFile(report.getBytes(CP1252));
        communicationRecordAttachmentBO.setContentType(CONTENT_TYPE_HTML);
        communicationRecordAttachmentBOList.add(communicationRecordAttachmentBO);

        return report;
        
    } finally {
        // Ensure user ID is restored
        brokerUserVo.setUserId(userIdBackUp);
    }
}

// Enhanced response building
private String[] buildResponse(ProcessResult processResult) {
    if (processResult == null) {
        return new String[] { null, "9999", "0" };
    }
    
    String errorCode = processResult.errorOnSendEmail() ? "9999" : "0000";
    String envelopeId = processResult.recordEnvelopeResponseBO() != null ? 
            processResult.recordEnvelopeResponseBO().getEnvelopeID() : null;
    int attachmentCount = processResult.communicationRecordAttachmentBOList() != null ? 
            processResult.communicationRecordAttachmentBOList().size() : 0;
    
    return new String[] { envelopeId, errorCode, String.valueOf(attachmentCount) };
}

// Enhanced process single reference method
private ProcessSingleReferenceResult processSinglePoliceReference(BrokerUserVo brokerUserVo, List<MultipartFile> documents,
        String policeReference, String myDemand, ReportLabelVo reportLabelVo, String documentTypeCode,
        String concernLabel, Date brokerResponseDate, String brokerReference, String folderTypeId,
        String producerReference, String producerName, Long uploadHistoryId, boolean bMailAccount,
        String mailAdress, boolean bMailBroker, String mailAdressBroker) 
        throws BusinessException, JBCException, IOException {
    
    // Create new attachment list for each police reference as in original
    List<CommunicationRecordAttachmentBO> communicationRecordAttachmentBOList = new ArrayList<>();
    
    BrokerFolderVo folderVo = findFolder(brokerUserVo, policeReference, folderTypeId);
    Integer managerId = getManagerIdFromAttribution(folderVo, brokerUserVo, policeReference);
    String productInsurance = folderVo.getInsuranceprodname();

    String submittedContentType = mapSubmittedContentType(documents, documentTypeCode, communicationRecordAttachmentBOList);
    String envelopUUid = communicationRecordProcessService.generateAndStoreDummyPdf();
    
    String report = generateReport(documents, policeReference, envelopUUid, producerName, myDemand, 
            brokerUserVo, reportLabelVo, concernLabel, brokerResponseDate, brokerReference, 
            productInsurance, producerReference, bMailAccount, mailAdress, mailAdressBroker, 
            communicationRecordAttachmentBOList, submittedContentType);

    RecordEnvelopeResponseBO recordEnvelopeResponseBO = storeAndRecordEnvelope(communicationRecordAttachmentBOList, 
            envelopUUid, uploadHistoryId, documentTypeCode, policeReference);

    boolean emailError = sendEmailsIfRequired(bMailAccount, bMailBroker, brokerUserVo, mailAdress, 
            mailAdressBroker, report, documents);

    return new ProcessSingleReferenceResult(recordEnvelopeResponseBO, emailError, communicationRecordAttachmentBOList);
}

// Update the record to include attachments
private record ProcessSingleReferenceResult(RecordEnvelopeResponseBO recordEnvelopeResponseBO, 
                                          boolean emailError,
                                          List<CommunicationRecordAttachmentBO> attachments) {}

private record ProcessResult(RecordEnvelopeResponseBO recordEnvelopeResponseBO, 
                           boolean errorOnSendEmail,
                           List<CommunicationRecordAttachmentBO> communicationRecordAttachmentBOList) {}
