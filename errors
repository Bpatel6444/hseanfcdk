@Test

void testAddDocumentsForDemandeOffre_inboxIdScenario() throws Exception {

    // Arrange - Test when inboxId is used instead of inbox

    List<MultipartFile> documents = Arrays.asList(mockFile);

    List<CriterionVo> criteria = createTestCriteria();

    String myDemand = "Test demand";

    ReportLabelVo reportLabelVo = createTestReportLabelVo();

    String documentTypeCode = "51";

    String concernLabel = "Test concern";

    Date brokerResponseDate = new Date();

    String brokerReference = "BROKER123";

    boolean bMailAccount = false;

    String mailAdress = "";

    String docPath = "/test/path";

    String domain = "SOUSIARD";

    String fleetNumber = "";

    String fleetNumberOfVehicle = "";

    String fleetSector = "";

    boolean bMailBroker = false;

    String mailAdressBroker = "";

    String producerReference = "PROD123";

    // Setup mocks for inboxId scenario - FIXED with proper setup

    setupMocksForInboxIdScenario();

    // Act

    String[] result = brokerDocumentService.addDocumentsForDemandeOffre(

            validBrokerUserVo, documents, criteria, myDemand, reportLabelVo,

            documentTypeCode, concernLabel, brokerResponseDate, brokerReference,

            bMailAccount, mailAdress, docPath, domain, fleetNumber,

            fleetNumberOfVehicle, fleetSector, bMailBroker, mailAdressBroker,

            producerReference);

    // Assert

    assertNotNull(result);

    assertEquals(3, result.length);

}

private void setupMocksForInboxIdScenario() throws Exception {

    // Setup attribution with inboxId (inboxForAttributionOfTypeId = "Y") - FIXED with proper setup

    AttributionOutputVo attributionOutput = new AttributionOutputVo();

    attributionOutput.setManagerForAttribution("0");

    attributionOutput.setInboxForAttribution("INBOX123");

    // Use reflection to set private field inboxForAttributionOfTypeId

    try {

        Field field = AttributionOutputVo.class.getDeclaredField("inboxForAttributionOfTypeId");

        field.setAccessible(true);

        field.set(attributionOutput, "Y"); // This triggers inboxId path

    } catch (Exception e) {

        // If reflection fails, the test might still work depending on the actual implementation

    }

    lenient().when(gdAttributionRemoteServiceDao.getAttributionInfoFromGD(any(AttributionInputVo.class)))

            .thenReturn(attributionOutput);

    // Setup other mocks with lenient to avoid unnecessary stubbing

    DistributorInfo distributor = new DistributorInfo();

    distributor.setDistributorId("DIST123");

    distributor.setName("Test");

    distributor.setFname("Distributor");

    lenient().when(difAdapter.getDistributortByPAccId(anyString())).thenReturn(distributor);

    Unit unit = mock(Unit.class);

    OfficesPaGrouping grouping = mock(OfficesPaGrouping.class);

    List<Region> regions = new ArrayList<>();

    Region region = mock(Region.class);

    lenient().when(region.getBusinessLine()).thenReturn((int) '2');

    lenient().when(region.getRegionCode()).thenReturn(123);

    regions.add(region);

    lenient().when(grouping.getRegions()).thenReturn(regions);

    List<OfficesPaGrouping> groupings = Arrays.asList(grouping);

    lenient().when(unit.getOfficesPaGroupings()).thenReturn(groupings);

    lenient().when(difAdapter.getUnitByProducerAccountId(anyString())).thenReturn(unit);

    lenient().when(uploadHistoryDao.insertUploadHistory(any(UploadHistoryVo.class))).thenReturn(1L);

    lenient().when(communicationRecordProcessService.generateAndStoreDummyPdf()).thenReturn("ENV123");

    RecordEnvelopeResponseBO envelopeResponse = new RecordEnvelopeResponseBO();

    envelopeResponse.setEnvelopeID("ENV123");

    lenient().when(communicationRecordProcessService.recordEnvelop(anyList(), anyString(), anyString(),

            anyString(), anyString(), anyString(), anyLong())).thenReturn(envelopeResponse);

}

 
BusinessException{code=null, message='recordEnvelopeResponseBO in not found
', origin='null', causes=null}
 at be.axa.pccorp.eservicing.clink.service.impl.BrokerDocumentService.addDocumentsForDemandeOffre(BrokerDocumentService.java:449)
 at be.axa.pccorp.eservicing.clink.service.impl.BrokerDocumentServiceTest.testAddDocumentsForDemandeOffre_inboxIdScenario(BrokerDocumentServiceTest.java:4289)
 at java.base/java.lang.reflect.Method.invoke(Method.java:580)
 at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
 at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
Caused by: BusinessException{code=null, message='recordEnvelopeResponseBO in not found', origin='null', causes=null}
 at be.axa.pccorp.eservicing.clink.service.impl.BrokerDocumentService.lambda$addDocumentsForDemandeOffre$0(BrokerDocumentService.java:445)
 at java.base/java.util.Optional.orElseThrow(Optional.java:403)
 at be.axa.pccorp.eservicing.clink.service.impl.BrokerDocumentService.addDocumentsForDemandeOffre(BrokerDocumentService.java:445)
 ... 4 more

@Test

void testAddDocumentsForDemandeOffre_flowExceptionScenario() throws Exception {

    // Arrange - Test the flow exception path when fleetNumber exists but inbox is null

    List<MultipartFile> documents = Arrays.asList(mockFile);

    List<CriterionVo> criteria = createTestCriteria();

    String myDemand = "Test demand";

    ReportLabelVo reportLabelVo = createTestReportLabelVo();

    String documentTypeCode = "51";

    String concernLabel = "Test concern";

    Date brokerResponseDate = new Date();

    String brokerReference = "BROKER123";

    boolean bMailAccount = false;

    String mailAdress = "";

    String docPath = "/test/path";

    String domain = "SOUSIARD";

    String fleetNumber = "FLEET123"; // This triggers flow exception

    String fleetNumberOfVehicle = "";

    String fleetSector = "";

    boolean bMailBroker = false;

    String mailAdressBroker = "";

    String producerReference = "PROD123";

    // Setup mocks for flow exception scenario - FIXED with proper envelope response

    setupMocksForFlowException();

    // Act

    String[] result = brokerDocumentService.addDocumentsForDemandeOffre(

            validBrokerUserVo, documents, criteria, myDemand, reportLabelVo,

            documentTypeCode, concernLabel, brokerResponseDate, brokerReference,

            bMailAccount, mailAdress, docPath, domain, fleetNumber,

            fleetNumberOfVehicle, fleetSector, bMailBroker, mailAdressBroker,

            producerReference);

    // Assert

    assertNotNull(result);

    assertEquals(3, result.length);

    assertNotNull(result[0]); // envelope ID should not be null

}

private void setupMocksForFlowException() throws Exception {

    // Setup attribution with manager but no inbox (triggers flow exception) - FIXED with proper inboxOtTypeId

    AttributionOutputVo attributionOutput = new AttributionOutputVo();

    attributionOutput.setManagerForAttribution("123"); // Manager exists

    attributionOutput.setInboxForAttribution(null); // No inbox - triggers flow exception

    // Set inboxForAttributionOfTypeId using reflection to avoid NPE

    try {

        Field field = AttributionOutputVo.class.getDeclaredField("inboxForAttributionOfTypeId");

        field.setAccessible(true);

        field.set(attributionOutput, "N"); // Set to non-null value

    } catch (Exception e) {

        // If reflection fails, continue without it

    }

    lenient().when(gdAttributionRemoteServiceDao.getAttributionInfoFromGD(any(AttributionInputVo.class)))

            .thenReturn(attributionOutput);

    // Setup other required mocks

    DistributorInfo distributor = new DistributorInfo();

    distributor.setDistributorId("DIST123");

    distributor.setName("Test");

    distributor.setFname("Distributor");

    lenient().when(difAdapter.getDistributortByPAccId(anyString())).thenReturn(distributor);

    Unit unit = mock(Unit.class);

    lenient().when(unit.getOfficesPaGroupings()).thenReturn(new ArrayList<>());

    lenient().when(difAdapter.getUnitByProducerAccountId(anyString())).thenReturn(unit);

    lenient().when(uploadHistoryDao.insertUploadHistory(any(UploadHistoryVo.class))).thenReturn(1L);

    lenient().when(communicationRecordProcessService.generateAndStoreDummyPdf()).thenReturn("ENV123");

    // Return valid envelope response to avoid BusinessException

    RecordEnvelopeResponseBO envelopeResponse = new RecordEnvelopeResponseBO();

    envelopeResponse.setEnvelopeID("ENV123");

    lenient().when(communicationRecordProcessService.recordEnvelop(anyList(), anyString(), anyString(),

            anyString(), anyString(), anyString(), anyLong())).thenReturn(envelopeResponse);

}

 
BusinessException{code=null, message='recordEnvelopeResponseBO in not found
', origin='null', causes=null}
 at be.axa.pccorp.eservicing.clink.service.impl.BrokerDocumentService.addDocumentsForDemandeOffre(BrokerDocumentService.java:449)
 at be.axa.pccorp.eservicing.clink.service.impl.BrokerDocumentServiceTest.testAddDocumentsForDemandeOffre_flowExceptionScenario(BrokerDocumentServiceTest.java:4155)
 at java.base/java.lang.reflect.Method.invoke(Method.java:580)
 at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
 at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
Caused by: BusinessException{code=null, message='recordEnvelopeResponseBO in not found', origin='null', causes=null}
 at be.axa.pccorp.eservicing.clink.service.impl.BrokerDocumentService.lambda$addDocumentsForDemandeOffre$0(BrokerDocumentService.java:445)
 at java.base/java.util.Optional.orElseThrow(Optional.java:403)
 at be.axa.pccorp.eservicing.clink.service.impl.BrokerDocumentService.addDocumentsForDemandeOffre(BrokerDocumentService.java:445)
 ... 4 more

 @Test

void testAddDocumentsForDemandeOffre_nullRecordEnvelopeResponse() throws Exception {

    // Arrange

    List<MultipartFile> documents = Arrays.asList(mockFile);

    List<CriterionVo> criteria = createTestCriteria();

    String myDemand = "Test demand";

    ReportLabelVo reportLabelVo = createTestReportLabelVo();

    String documentTypeCode = "51";

    String concernLabel = "Test concern";

    Date brokerResponseDate = new Date();

    String brokerReference = "BROKER123";

    boolean bMailAccount = false;

    String mailAdress = "";

    String docPath = "/test/path";

    String domain = "SOUSIARD";

    String fleetNumber = "";

    String fleetNumberOfVehicle = "";

    String fleetSector = "";

    boolean bMailBroker = false;

    String mailAdressBroker = "";

    String producerReference = "PROD123";

    // Setup mocks but return null for recordEnvelopeResponseBO - FIXED with proper inboxOtTypeId

    setupMocksForDemandeOffreWithNullEnvelope();

    // Act & Assert

    BusinessException exception = assertThrows(BusinessException.class, () ->

            brokerDocumentService.addDocumentsForDemandeOffre(

                    validBrokerUserVo, documents, criteria, myDemand, reportLabelVo,

                    documentTypeCode, concernLabel, brokerResponseDate, brokerReference,

                    bMailAccount, mailAdress, docPath, domain, fleetNumber,

                    fleetNumberOfVehicle, fleetSector, bMailBroker, mailAdressBroker,

                    producerReference));

    assertTrue(exception.getMessage().contains("recordEnvelopeResponseBO in not found"));

}

private void setupMocksForDemandeOffreWithNullEnvelope() throws Exception {

    // Setup attribution with proper inboxOtTypeId to avoid NPE

    AttributionOutputVo attributionOutput = new AttributionOutputVo();

    attributionOutput.setManagerForAttribution("123");

    attributionOutput.setInboxForAttribution("INBOX123");

    // Set inboxForAttributionOfTypeId using reflection to avoid NPE

    try {

        Field field = AttributionOutputVo.class.getDeclaredField("inboxForAttributionOfTypeId");

        field.setAccessible(true);

        field.set(attributionOutput, "N"); // Set to non-null value

    } catch (Exception e) {

        // If reflection fails, continue without it

    }

    lenient().when(gdAttributionRemoteServiceDao.getAttributionInfoFromGD(any(AttributionInputVo.class)))

            .thenReturn(attributionOutput);

    // Setup other required mocks

    DistributorInfo distributor = new DistributorInfo();

    distributor.setDistributorId("DIST123");

    distributor.setName("Test");

    distributor.setFname("Distributor");

    lenient().when(difAdapter.getDistributortByPAccId(anyString())).thenReturn(distributor);

    Unit unit = mock(Unit.class);

    OfficesPaGrouping grouping = mock(OfficesPaGrouping.class);

    List<Region> regions = new ArrayList<>();

    Region region = mock(Region.class);

    when(region.getBusinessLine()).thenReturn((int) '2');

    when(region.getRegionCode()).thenReturn(123);

    regions.add(region);

    when(grouping.getRegions()).thenReturn(regions);

    List<OfficesPaGrouping> groupings = Arrays.asList(grouping);

    when(unit.getOfficesPaGroupings()).thenReturn(groupings);

    lenient().when(difAdapter.getUnitByProducerAccountId(anyString())).thenReturn(unit);

    lenient().when(uploadHistoryDao.insertUploadHistory(any(UploadHistoryVo.class)))

            .thenReturn(1L);

    lenient().when(communicationRecordProcessService.generateAndStoreDummyPdf())

            .thenReturn("ENV123");

    // Return null for recordEnvelope to trigger the exception

    lenient().when(communicationRecordProcessService.recordEnvelop(anyList(), anyString(), anyString(),

            anyString(), anyString(), anyString(), anyLong())).thenReturn(null);

}

 
org.mockito.exceptions.misusing.UnnecessaryStubbingException: 
Unnecessary stubbings detected.
Clean & maintainable test code requires zero unnecessary code.
Following stubbings are unnecessary (click to navigate to relevant line of code):
  1. -> at be.axa.pccorp.eservicing.clink.service.impl.BrokerDocumentServiceTest.setupMocksForDemandeOffreWithNullEnvelope(BrokerDocumentServiceTest.java:3975)
  2. -> at be.axa.pccorp.eservicing.clink.service.impl.BrokerDocumentServiceTest.setupMocksForDemandeOffreWithNullEnvelope(BrokerDocumentServiceTest.java:3977)
  3. -> at be.axa.pccorp.eservicing.clink.service.impl.BrokerDocumentServiceTest.setupMocksForDemandeOffreWithNullEnvelope(BrokerDocumentServiceTest.java:3981)
  4. -> at be.axa.pccorp.eservicing.clink.service.impl.BrokerDocumentServiceTest.setupMocksForDemandeOffreWithNullEnvelope(BrokerDocumentServiceTest.java:3985)
Please remove unnecessary stubbings or use 'lenient' strictness. More info: javadoc for UnnecessaryStubbingException class.

 at org.mockito.junit.jupiter.MockitoExtension.afterEach(MockitoExtension.java:197)
 at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
 at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)

 @Test

void testAddDocumentsForTransferCourier_folderNotInPortefeuille() throws Exception {

    // Arrange

    String generalManager = "John Manager";

    String generalManagerTel = "1234567890";

    List<MultipartFile> documents = Arrays.asList(mockFile);

    String policeReference = "POL123456789";

    String documentTypeCode = "42";

    String myDemand = "Test transfer demand";

    ReportLabelVo reportLabelVo = createTestReportLabelVo();

    Date brokerResponseDate = new Date();

    String brokerReference = "BROKER123";

    String folderTypeId = "2";

    String typeCourrierId = "1";

    String typeAttestationId = "1";

    boolean bMailAccount = false;

    String mailAdress = "";

    String languagesAsked = "";

    boolean bMailBroker = false;

    String mailAdressBroker = "";

    // Setup folder that's not in broker's portefeuille

    BrokerFolderVo folderVo = mock(BrokerFolderVo.class);

    when(folderVo.getProducernumber()).thenReturn("DIFFERENT123"); // Different from broker's producer numbers

    when(folderVo.getInsuredname()).thenReturn("Test Insured");

    GdFolderTypeVoPT gdFolderType = new GdFolderTypeVoPT();

    gdFolderType.setFolderTypeId(2);

    when(folderVo.getGdFolderType()).thenReturn(gdFolderType);

    List<BrokerFolderVo> folders = Arrays.asList(folderVo);

    when(gdFolderRemoteServicesDao.searchFoldersByObjectNameWithoutDocuments(

            any(), anyString(), anyBoolean(), anyString()))

            .thenReturn(folders);

    // Setup DIF adapter

    DistributorInfo distributor = new DistributorInfo();

    distributor.setDistributorId("DIST123");

    lenient().when(difAdapter.getDistributortByPAccId(anyString())).thenReturn(distributor);

    // Act & Assert - Fixed assertion to check for the actual exception message

    BusinessException exception = assertThrows(BusinessException.class, () ->

            brokerDocumentService.addDocumentsForTransferCourier(

                    generalManager, generalManagerTel, validBrokerUserVo, documents, policeReference,

                    documentTypeCode, myDemand, reportLabelVo, brokerResponseDate, brokerReference,

                    folderTypeId, typeCourrierId, typeAttestationId, bMailAccount, mailAdress,

                    languagesAsked, bMailBroker, mailAdressBroker));

    // Check if it's the right type of exception (folder not in portefeuille)

    assertTrue(exception.getMessage().contains("not in portefeuille") ||

            exception.getMessage().contains("PORTEFEUILLE"));

}

 
org.opentest4j.AssertionFailedError: 
Expected :true
Actual   :false
<Click to see difference>


 at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
 at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
 at org.junit.jupiter.api.AssertTrue.failNotTrue(AssertTrue.java:63)
 at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:36)
 at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:31)
 at org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:183)
 at be.axa.pccorp.eservicing.clink.service.impl.BrokerDocumentServiceTest.testAddDocumentsForTransferCourier_folderNotInPortefeuille(BrokerDocumentServiceTest.java:3853)
 at java.base/java.lang.reflect.Method.invoke(Method.java:580)
 at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
 at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)

 

